/*
 *    Copyright 2025 A Jentleman
 *
 *    Licensed under the Apache License, Version 2.0 (the "License");
 *    you may not use this file except in compliance with the License.
 *    You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 *    Unless required by applicable law or agreed to in writing, software
 *    distributed under the License is distributed on an "AS IS" BASIS,
 *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *    See the License for the specific language governing permissions and
 *    limitations under the License.
 */

// Code generated by inject generate; DO NOT EDIT.

package inject_test

import (
	"testing"

	"github.com/a-jentleman/inject"
	"github.com/stretchr/testify/require"
)

// This file is not particularly useful. The reason it is here is to
// suppress warnings about unused, exported, functions in a cheap and cheerful way.

func TestValue(t *testing.T) {
	require.Panics(t, func() {
		_ = inject.Value[any]()
	})
}
func TestValueE(t *testing.T) {
	require.Panics(t, func() {
		_, _ = inject.ValueE[any]()
	})
}
func TestValueC(t *testing.T) {
	require.Panics(t, func() {
		_, _ = inject.ValueC[any]()
	})
}
func TestValueCE(t *testing.T) {
	require.Panics(t, func() {
		_, _, _ = inject.ValueCE[any]()
	})
}
func TestValues2(t *testing.T) {
	require.Panics(t, func() {
		_, _ = inject.Values2[any, any]()
	})
}
func TestValues2E(t *testing.T) {
	require.Panics(t, func() {
		_, _, _ = inject.Values2E[any, any]()
	})
}
func TestValues2C(t *testing.T) {
	require.Panics(t, func() {
		_, _, _ = inject.Values2C[any, any]()
	})
}
func TestValues2CE(t *testing.T) {
	require.Panics(t, func() {
		_, _, _, _ = inject.Values2CE[any, any]()
	})
}
func TestValues3(t *testing.T) {
	require.Panics(t, func() {
		_, _, _ = inject.Values3[any, any, any]()
	})
}
func TestValues3E(t *testing.T) {
	require.Panics(t, func() {
		_, _, _, _ = inject.Values3E[any, any, any]()
	})
}
func TestValues3C(t *testing.T) {
	require.Panics(t, func() {
		_, _, _, _ = inject.Values3C[any, any, any]()
	})
}
func TestValues3CE(t *testing.T) {
	require.Panics(t, func() {
		_, _, _, _, _ = inject.Values3CE[any, any, any]()
	})
}
func TestValues4(t *testing.T) {
	require.Panics(t, func() {
		_, _, _, _ = inject.Values4[any, any, any, any]()
	})
}
func TestValues4E(t *testing.T) {
	require.Panics(t, func() {
		_, _, _, _, _ = inject.Values4E[any, any, any, any]()
	})
}
func TestValues4C(t *testing.T) {
	require.Panics(t, func() {
		_, _, _, _, _ = inject.Values4C[any, any, any, any]()
	})
}
func TestValues4CE(t *testing.T) {
	require.Panics(t, func() {
		_, _, _, _, _, _ = inject.Values4CE[any, any, any, any]()
	})
}
func TestValues5(t *testing.T) {
	require.Panics(t, func() {
		_, _, _, _, _ = inject.Values5[any, any, any, any, any]()
	})
}
func TestValues5E(t *testing.T) {
	require.Panics(t, func() {
		_, _, _, _, _, _ = inject.Values5E[any, any, any, any, any]()
	})
}
func TestValues5C(t *testing.T) {
	require.Panics(t, func() {
		_, _, _, _, _, _ = inject.Values5C[any, any, any, any, any]()
	})
}
func TestValues5CE(t *testing.T) {
	require.Panics(t, func() {
		_, _, _, _, _, _, _ = inject.Values5CE[any, any, any, any, any]()
	})
}
func TestValues6(t *testing.T) {
	require.Panics(t, func() {
		_, _, _, _, _, _ = inject.Values6[any, any, any, any, any, any]()
	})
}
func TestValues6E(t *testing.T) {
	require.Panics(t, func() {
		_, _, _, _, _, _, _ = inject.Values6E[any, any, any, any, any, any]()
	})
}
func TestValues6C(t *testing.T) {
	require.Panics(t, func() {
		_, _, _, _, _, _, _ = inject.Values6C[any, any, any, any, any, any]()
	})
}
func TestValues6CE(t *testing.T) {
	require.Panics(t, func() {
		_, _, _, _, _, _, _, _ = inject.Values6CE[any, any, any, any, any, any]()
	})
}
func TestValues7(t *testing.T) {
	require.Panics(t, func() {
		_, _, _, _, _, _, _ = inject.Values7[any, any, any, any, any, any, any]()
	})
}
func TestValues7E(t *testing.T) {
	require.Panics(t, func() {
		_, _, _, _, _, _, _, _ = inject.Values7E[any, any, any, any, any, any, any]()
	})
}
func TestValues7C(t *testing.T) {
	require.Panics(t, func() {
		_, _, _, _, _, _, _, _ = inject.Values7C[any, any, any, any, any, any, any]()
	})
}
func TestValues7CE(t *testing.T) {
	require.Panics(t, func() {
		_, _, _, _, _, _, _, _, _ = inject.Values7CE[any, any, any, any, any, any, any]()
	})
}
func TestValues8(t *testing.T) {
	require.Panics(t, func() {
		_, _, _, _, _, _, _, _ = inject.Values8[any, any, any, any, any, any, any, any]()
	})
}
func TestValues8E(t *testing.T) {
	require.Panics(t, func() {
		_, _, _, _, _, _, _, _, _ = inject.Values8E[any, any, any, any, any, any, any, any]()
	})
}
func TestValues8C(t *testing.T) {
	require.Panics(t, func() {
		_, _, _, _, _, _, _, _, _ = inject.Values8C[any, any, any, any, any, any, any, any]()
	})
}
func TestValues8CE(t *testing.T) {
	require.Panics(t, func() {
		_, _, _, _, _, _, _, _, _, _ = inject.Values8CE[any, any, any, any, any, any, any, any]()
	})
}
