/*
 *    Copyright 2025 A Jentleman
 *
 *    Licensed under the Apache License, Version 2.0 (the "License");
 *    you may not use this file except in compliance with the License.
 *    You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 *    Unless required by applicable law or agreed to in writing, software
 *    distributed under the License is distributed on an "AS IS" BASIS,
 *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *    See the License for the specific language governing permissions and
 *    limitations under the License.
 */

package main

import (
	"bytes"
	_ "embed"
	"fmt"
	"go/format"
	"io"
	"os"
	"strings"
	"text/template"

	"github.com/spf13/cobra"
)

//go:embed licence_header.txt
var licenceHeaderText string

var public = template.Must(template.New("").Parse(
	`{{- .License }}

// Code generated by inject generate; DO NOT EDIT.

package inject


{{- range .Funcs }}
// {{ .Name }} is a placeholder function whose implementation is generated by the 'inject' command.
func {{ .Name }}[{{ .TypeParams }}](_ ...any) ({{ .ReturnParams }}) {
	panic("not implemented")
}
{{- end }}
`,
))

var publicTest = template.Must(template.New("").Parse(
	`{{- .License }}

// Code generated by inject generate; DO NOT EDIT.

package inject_test

import (
	"testing"

	"github.com/a-jentleman/inject"
	"github.com/stretchr/testify/require"
)

// This file is not particularly useful. The reason it is here is to
// suppress warnings about unused, exported, functions in a cheap and cheerful way.

{{ range .Funcs }}
func Test{{ .Name }}(t *testing.T) {
	require.Panics(t, func() { 
		{{ .TestDiscardVars }} = inject.{{ .Name }}[{{ .TestTypeParams }}]() 
	})
}
{{- end }}
`,
))

var internal = template.Must(template.New("").Parse(
	`{{- .License }}

// Code generated by inject generate; DO NOT EDIT.

package inject

const ExportedPkgPath = "{{ .ExportedPkgPath }}"

// InjectorFunc describes an injector function
type InjectorFunc struct {

	// ImportPath is the import path of the injector function.
	ImportPath string

	// FuncName is the name of the injector function.
	FuncName string

	// ReturnTypes is the number of return values. This does not include the cleanup return value, or error return value, if either exists.
	ReturnTypes int

	// HasCleanup reports whether the injector function has a cleanup return value.
	HasCleanup bool

	// HasError reports whether the injector function has an error return value.
	HasError bool
}

// Injectors is a list of all known injector functions.
var Injectors = []InjectorFunc{
{{- range .Funcs }}
{
	ImportPath: ExportedPkgPath,
	FuncName: "{{ .Name }}",
	ReturnTypes: {{ .ReturnTypes }},
	HasCleanup: {{ .Cleanup }},
	HasError: {{ .Error }},
},
{{- end }}
}

// InjectorsByName is a map of known injector functions by indexed by their (1) import path and (2) function name.
var InjectorsByName = map[string]map[string]*InjectorFunc{
	ExportedPkgPath: {
		{{- range $ndx, $f := .Funcs }}
		"{{ $f.Name }}": &Injectors[{{ $ndx }}],
		{{- end }}
	},
}
`))

// generateCmd represents the generate command
var generateCmd = &cobra.Command{
	Use: "generate",
	RunE: func(cmd *cobra.Command, args []string) error {
		type Func struct {
			Name            string
			ReturnTypes     int
			TypeParams      string
			ReturnParams    string
			TestTypeParams  string
			TestDiscardVars string
			Cleanup         bool
			Error           bool
		}

		var cleanups = []bool{false, true}
		var errs = []bool{false, true}
		var funcs []Func

		generateName := func(i int, cleanup, canErr bool) string {
			ret := "Value"
			if i > 1 {
				ret = fmt.Sprintf("%ss%d", ret, i)
			}
			if cleanup {
				ret += "C"
			}
			if canErr {
				ret += "E"
			}
			return ret
		}

		generateTypeParams := func(i int) string {
			names := make([]string, 0, i)
			if i < 2 {
				names = append(names, "R")
			} else {
				for x := 1; x <= i; x++ {
					names = append(names, fmt.Sprintf("R%d", x))
				}
			}

			return strings.Join(names, ", ") + " any"
		}

		generateInstantiatedTestTypeParams := func(i int) string {
			names := make([]string, 0, i)
			for x := 1; x <= i; x++ {
				names = append(names, "any")
			}

			return strings.Join(names, ", ")
		}

		generateTestDiscardVars := func(i int, cleanup bool, canErr bool) string {
			names := make([]string, 0, i)
			for x := 1; x <= i; x++ {
				names = append(names, "_")
			}

			if cleanup {
				names = append(names, "_")
			}

			if canErr {
				names = append(names, "_")
			}

			return strings.Join(names, ", ")
		}

		generateReturnParams := func(i int, cleanup bool, canErr bool) string {
			names := make([]string, 0, i)
			if i < 2 {
				names = append(names, "ret R")
			} else {
				for x := 1; x <= i; x++ {
					names = append(names, fmt.Sprintf("ret%d R%d", x, x))
				}
			}

			if cleanup {
				names = append(names, "cleanup func()")
			}

			if canErr {
				names = append(names, "err error")
			}

			return strings.Join(names, ", ")

		}

		for i := 1; i <= 8; i++ {
			for _, cleanup := range cleanups {
				for _, canErr := range errs {
					funcs = append(funcs, Func{
						Name:            generateName(i, cleanup, canErr),
						ReturnTypes:     i,
						TypeParams:      generateTypeParams(i),
						ReturnParams:    generateReturnParams(i, cleanup, canErr),
						TestTypeParams:  generateInstantiatedTestTypeParams(i),
						TestDiscardVars: generateTestDiscardVars(i, cleanup, canErr),
						Cleanup:         cleanup,
						Error:           canErr,
					})
				}
			}
		}

		var b bytes.Buffer
		var err error
		err = public.Execute(&b, map[string]interface{}{
			"Funcs":           funcs,
			"License":         licenceHeaderText,
			"ExportedPkgPath": "github.com/a-jentleman/inject",
		})

		publicSrc, err := format.Source(b.Bytes())
		if err != nil {
			return err
		}
		b.Reset()

		err = publicTest.Execute(&b, map[string]interface{}{
			"Funcs":           funcs,
			"License":         licenceHeaderText,
			"ExportedPkgPath": "github.com/a-jentleman/inject",
		})

		publicTestSrc, err := format.Source(b.Bytes())
		if err != nil {
			return err
		}
		b.Reset()

		err = internal.Execute(&b, map[string]interface{}{
			"Funcs":           funcs,
			"License":         licenceHeaderText,
			"ExportedPkgPath": "github.com/a-jentleman/inject",
		})
		if err != nil {
			return err
		}

		internalSrc, err := format.Source(b.Bytes())
		if err != nil {
			return err
		}
		b.Reset()

		f, err := os.Create("inject_gen.go")
		if err != nil {
			return err
		}
		defer f.Close()

		_, err = io.Copy(f, bytes.NewReader(publicSrc))
		if err != nil {
			return err
		}

		f, err = os.Create("inject_gen_test.go")
		if err != nil {
			return err
		}
		defer f.Close()

		_, err = io.Copy(f, bytes.NewReader(publicTestSrc))
		if err != nil {
			return err
		}

		f, err = os.Create("internal/inject/inject_gen.go")
		if err != nil {
			return err
		}
		defer f.Close()

		_, err = io.Copy(f, bytes.NewReader(internalSrc))
		if err != nil {
			return err
		}

		return nil
	},
}

func init() {
	rootCmd.AddCommand(generateCmd)
}
